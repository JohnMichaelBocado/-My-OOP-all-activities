  import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import testdb.MySQLConnectionTest;
import java.sql.*;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
 
/**
 *
 * @author CpE-PC1
 */
public class Inventory extends javax.swing.JFrame {
 
    /**
     * Creates new form Inventory
     */
    Connection conn;
 
    public Inventory() {
        initComponents();
        conn = MySQLConnectionTest.getConnection(); // âœ… assigns to the class-level field
 
    if (conn == null) {
        JOptionPane.showMessageDialog(this, "Database connection failed.", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        loadTableData();
    }
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
 
        txtITEM = new javax.swing.JTextField();
        btnADD = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnUPDATE = new javax.swing.JButton();
        btnLOAD = new javax.swing.JButton();
        btnDELETE = new javax.swing.JButton();
        txtPRICE = new javax.swing.JTextField();
        txtQUANTITY = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
 
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
 
        txtITEM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtITEMActionPerformed(evt);
            }
        });
        getContentPane().add(txtITEM, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, 140, -1));
 
        btnADD.setText("ADD");
        btnADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnADDActionPerformed(evt);
            }
        });
        getContentPane().add(btnADD, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 590, 120, 50));
 
        jTable1.setBackground(new java.awt.Color(0, 222, 255));
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
 
            },
            new String [] {
                "Item", "Price", "Quantity"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
 
        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 730, 339));
 
        btnUPDATE.setText("UPDATE");
        btnUPDATE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUPDATEActionPerformed(evt);
            }
        });
        getContentPane().add(btnUPDATE, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 590, 120, 50));
 
        btnLOAD.setText("LOAD");
        btnLOAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLOADActionPerformed(evt);
            }
        });
        getContentPane().add(btnLOAD, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 590, 140, 50));
 
        btnDELETE.setBackground(new java.awt.Color(255, 153, 153));
        btnDELETE.setText("DELETE");
        btnDELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDELETEActionPerformed(evt);
            }
        });
        getContentPane().add(btnDELETE, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 590, 110, 50));
        getContentPane().add(txtPRICE, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, 140, -1));
        getContentPane().add(txtQUANTITY, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, 140, -1));
 
        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ITEM");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, -1, -1));
 
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("PRICE");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, -1, -1));
 
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("QUANTITY");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, -1, -1));
 
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/supermarket-cart-anime-visual-novel-game-generate-ai-photo.jpg"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 930, 800));
 
        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void btnADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnADDActionPerformed
    String name = txtITEM.getText();
    String priceStr = txtPRICE.getText();
    String quantityStr = txtQUANTITY.getText();
 
    if (!name.isEmpty() && !priceStr.isEmpty() && !quantityStr.isEmpty()) {
        try {
            double price = Double.parseDouble(priceStr);
            int quantity = Integer.parseInt(quantityStr);
 
            String sql = "INSERT INTO products (item_name, price, quantity) VALUES (?, ?, ?)";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setString(1, name);
            pst.setDouble(2, price);
            pst.setInt(3, quantity);
            pst.executeUpdate();
 
            JOptionPane.showMessageDialog(this, "Product added to database.");
            loadTableData(); // Refresh table
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please fill in all fields.");
    }
    }//GEN-LAST:event_btnADDActionPerformed
 
    private void btnUPDATEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUPDATEActionPerformed
  int selectedRow = jTable1.getSelectedRow();
    if (selectedRow >= 0) {
        String name = txtITEM.getText();
        double price = Double.parseDouble(txtPRICE.getText());
        int quantity = Integer.parseInt(txtQUANTITY.getText());
 
        try {
            String sql = "UPDATE products SET price = ?, quantity = ? WHERE item_name = ?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setDouble(1, price);
            pst.setInt(2, quantity);
            pst.setString(3, name);
            pst.executeUpdate();
 
            JOptionPane.showMessageDialog(this, "Product updated.");
            loadTableData();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Update failed: " + ex.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a product to update.");
    }
    }//GEN-LAST:event_btnUPDATEActionPerformed
 
    private void loadTableData() {
    try {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing rows
 
        String sql = "SELECT * FROM products";
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);
 
        while (rs.next()) {
            Object[] row = {
                rs.getString("item_name"),
                rs.getDouble("price"),
                rs.getInt("quantity")
            };
            model.addRow(row);
        }
 
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Failed to load data: " + ex.getMessage());
    }
